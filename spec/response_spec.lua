local MockSocket = require 'spec.mock_socket'.MockSocket
local Response = require 'luxure.response'.Response
local utils = require 'luxure.utils'

describe('Response', function()
    it('should send some stuff', function()
        local sock = MockSocket.new()
        local r = Response.new(sock)
        r:send()
        local res = assert(sock.inner[1], 'nothing was sent')
        assert(string.find(res, '^HTTP/1.1 200 OK'), 'Didn\'t contain HTTP preamble')
        assert(string.find(res, 'Server: Luxure'), 'expected server ' .. res)
        assert(string.find(res, 'Content-Length: 0', 0, true), 'expected content length ' .. res)
    end)
    it('should send the right status', function()
        local sock = MockSocket.new()
        local r = Response.new(sock):status(500)
        r:send()
        local res = assert(sock.inner[1], 'nothing was sent')
        assert(string.find(res, '^HTTP/1.1 500 Internal Server Error'), 'expected 500, found ' .. res)
    end)
    it('should send the right default content type/length', function()
        local sock = MockSocket.new()
        local r = Response.new(sock)
        r:send('body')
        local res = assert(sock.inner[1], 'nothing was sent')
        assert(string.find(res, 'Content-Type: text/plain', 0, true), 'expected text/plain ' .. res)
        assert(string.find(res, 'Content-Length: 4', 0, true), 'expected length to be 4 ' .. res)
    end)
    it('should send the right explicit content type', function()
        local sock = MockSocket.new()
        local r = Response.new(sock):content_type('application/json')
        r:send('body')
        local res = assert(sock.inner[1], 'nothing was sent')
        assert(string.find(res, 'Content-Type: application/json', 0, true), 'expected application/json ' .. res)
    end)
    describe('has_sent', function()
        it('should work as expected with normal usage', function()
            local sock = MockSocket.new()
            local r = Response.new(sock)
            r:send('body')
            assert(r:has_sent(), 'expected that `send` would actually send...')
        end)
        it('should work as expected with direct socket usage', function()
            local sock = MockSocket.new()
            local r = Response.new(sock)
            r.outgoing:send('body')
            assert(r:has_sent(), 'expected that `outgoing:send` would actually send...')
        end)
        it('true should be cached', function()
            local sock = MockSocket.new()
            local s = spy.on(sock, 'getstats')
            local r = Response.new(sock)
            r.outgoing:send('body')
            assert(r:has_sent())
            assert(r:has_sent())
            assert.spy(s).was.called(1)
        end)
        it('false should not be cached', function()
            local sock = MockSocket.new()
            local s = spy.on(sock, 'getstats')
            local r = Response.new(sock)
            assert(not r:has_sent())
            assert(not r:has_sent())
            assert.spy(s).was.called(2)
        end)
    end)
end)
